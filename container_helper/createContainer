#!/usr/bin/env python
import argparse
import contextlib
import datetime
import docker
import io
import os
import re
import sys
import tarfile
import tempfile

from functools import wraps


PROJECTS = ("deployer", "higgs_deployer", "racdb_deployer", "general")
HOME = (
    r"/home/shinto/host",
    r"/home/shinto/host",
    r"/home/shinto/host",
    r"/home/{USER}")
SHELL = ("bash", "bash", "bash", "zsh")
SRC = (
    "compute-konrad-deployer/deployer",
    "higgs-gateway-appliance-deployer/deployer",
    "compute-rac-db-deployer/deployer",
    None)
IMAGE_REPOSITORY = (
    "busybox",
    "busybox",
    "busybox",
    "busybox")

SHELL_TYPE = {"bash": r"/bin/bash", "zsh": r"/bin/zsh", "sh": r"/bin/sh"}
SUB_DIRS = {"log": "log", "src": "src"}
DEFAULT_CMD = r'tail -f /dev/null'
DEFAULT_NO_PROXY_HOSTS = r'localhost,127.0.0.1'
PASSWD_FORMAT = r"{user}:x:{uid}:{gid}::{home}:{shell}"
GROUP_FORMAT = r"{group}:x:{gid}:"
PASSWD_REGEX = r":{UID}:{GID}:"
GROUP_REGEX = r":{GID}:"


class Project(object):
    HOME = dict(zip(PROJECTS, HOME))
    SHELL = dict(zip(PROJECTS, map(lambda key: SHELL_TYPE[key], SHELL)))
    SRC = dict(zip(PROJECTS, SRC))
    IMAGE_REPOSITORY = dict(zip(PROJECTS, IMAGE_REPOSITORY))

    def __init__(self, argument=None, project=PROJECTS[0]):
        self.__project = project
        self.__argument = argument
        self.__image_id = self.__argument.image_id
        self.__src = None

        # check src path exist
        if self.SRC[self.project]:
            self.__src = os.path.join(self.basesrc, self.SRC[self.project])
            if not os.path.isdir(self.__src):
                print("Warning: source path: {0} doesn't exist.".format(
                    self.__src))
                self.__src = None

    @property
    def basesrc(self):
        return self.__argument.basesrc

    @property
    def cmd(self):
        return self.__argument.cmd

    @property
    def cname(self):
        return self.__argument.cname

    @property
    def force_root(self):
        return self.__argument.force_root

    @property
    def gid(self):
        return self.__argument.gid

    @property
    def group(self):
        return self.__argument.group

    @property
    def home(self):
        home = self.HOME[self.project]

        if self.project == "general":
            return home.format(USER=self.user)

        return home

    @property
    def image_id(self):
        return self.__image_id

    @image_id.setter
    def image_id(self, value):
        self.__image_id = value

    @property
    def image_repository(self):
        return self.IMAGE_REPOSITORY[self.project]

    @property
    def image_tag(self):
        return self.__argument.tag

    @property
    def noproxy_host(self):
        return self.__argument.noproxy_host

    @property
    def privileged(self):
        return self.__argument.privileged

    @property
    def project(self):
        return self.__project

    @property
    def shell(self):
        return self.SHELL[self.project]

    @shell.setter
    def shell(self, value):
        self.SHELL[self.project] = value

    @property
    def src(self):
        if not self.__src:
            self.__src = os.path.join(self.working_dir, "src")
        return self.__src

    @property
    def uid(self):
        return self.__argument.uid

    @property
    def user(self):
        return self.__argument.username

    @property
    def working_dir(self):
        return self.__argument.workdir

    @working_dir.setter
    def working_dir(self, value):
        self.__argument.workdir = value


class TarArchive(object):
    def __init__(self, mode, data=None):
        self.file = io.BytesIO(data)
        self.tar = tarfile.open(mode=mode, fileobj=self.file)

    def add_text_file(self, filename, text, encoding='utf-8'):
        """Add the contents of `text` to a new entry in the `tar`
        file.
        :return: self
        """
        b = text.encode(encoding)
        f = io.BytesIO(b)
        info = tarfile.TarInfo(filename)
        info.size = len(b)
        info.type = tarfile.REGTYPE

        self.tar.addfile(info, fileobj=f)
        return self

    def get_text_file(self, filename, encoding='utf-8'):
        """Read the contents of a file in the archive.
        :return: contents of file in string.
        """
        return self.tar.extractfile(filename).read().decode(encoding)

    def close(self):
        self.tar.close()
        return self

    @property
    def buffer(self):
        return self.file.getvalue()


class DockerClient(object):
    CLIENT = None

    def __init__(self, func):
        if not self.CLIENT:
            self.CLIENT = docker.from_env(timeout=3)

        @wraps(func)
        def __wrapper(*args, **kargs):
            return func(self.CLIENT, *args, **kargs)
        self.__func = __wrapper

    def __call__(self, *args, **kargs):
        return self.__func(*args, **kargs)


@DockerClient
def get_image_id(client):
    images = client.images.list()

    for i in images:
        for t in i.tags:
            if project.image_repository in t:
                if project.image_tag == t.split(":")[-1]:
                    project.image_id = i.short_id.split(":")[-1]
                    return

    raise Exception("No image found match. {0}:{1}".format(
        project.image_repository, project.image_tag))


@DockerClient
def create_image_container(client):
    """
    :return: docker.models.containers.Container
             Which has short_id property.
    """
    cmd = project.cmd
    image_id = project.image_id
    c_name = generate_container_name(image_id)
    containerCollection = client.containers
    created_container = containerCollection.create(
        image_id, command=cmd, name=c_name)
    return created_container


@DockerClient
def check_shell(client, container_id):
    container = client.containers.get(container_id)

    if not inspect_file_exist(container, project.shell):
        for s in SHELL_TYPE.values():
            if inspect_file_exist(container, s):
                project.shell = s
                break


@DockerClient
def rewrite_uid_gid(client, container_id):
    container = client.containers.get(container_id)
    working_dir = project.working_dir

    keys = ("passwd", "group")
    passwd_loc = os.path.join(working_dir, 'passwd')
    group_loc = os.path.join(working_dir, 'group')
    file_loc_dict = dict(zip(keys, (passwd_loc, group_loc)))

    container_passwd_loc = os.path.join(r"/etc/passwd")
    container_group_loc = os.path.join(r"/etc/group")

    passwd_regex_fed = PASSWD_REGEX.format(UID=project.uid, GID=project.gid)
    group_regex_fed = GROUP_REGEX.format(GID=project.gid)
    regex_dict = dict(zip(keys, (passwd_regex_fed, group_regex_fed)))

    passwd_fed = PASSWD_FORMAT.format(
        user=project.user,
        uid=project.uid,
        gid=project.gid,
        home=project.home,
        shell=project.shell)
    group_fed = GROUP_FORMAT.format(
        group=project.group,
        gid=project.gid)
    fed_dict = dict(zip(keys, (passwd_fed, group_fed)))

    username_dict = dict(zip(keys, (project.user, project.group)))

    def rewrite(result_file):
        result = result_file[0]
        file_type = result_file[1]
        with open(file_loc_dict[file_type], "w") as fd:
            for ln in result.splitlines(True):
                if re.search(regex_dict[file_type], ln) or \
                   username_dict[file_type] in ln:
                    continue
                fd.write(ln)
            fd.write(fed_dict[file_type])

    def get_file(loc):
        fd = inspect_file_exist(container, loc)
        if fd:
            return fd
        else:
            raise Exception(
                "File {0} does not exist in container.".format(loc))

    def untar(fd_file):
        ta = TarArchive('r', fd_file[0].read())
        try:
            return ta.get_text_file(fd_file[1])
        finally:
            ta.close()

    map(rewrite,
        zip(map(untar,
                zip(map(get_file,
                        (container_passwd_loc, container_group_loc)),
                    keys)),
            keys))


@DockerClient
def create_container(client):
    containerCollection = client.containers
    image_id = project.image_id
    working_dir = project.working_dir

    c_name = generate_container_name(image_id)
    log_path = os.path.join(working_dir, "log")
    log_container_path = r'/var/log/deployer'
    src_path = project.src
    src_container_path = r'/home/shinto/deployer'
    host_path = os.path.join(working_dir)
    host_container_path = project.home
    passwd_path = os.path.join(working_dir, "passwd")
    passwd_container_path = r'/etc/passwd'
    group_path = os.path.join(working_dir, "group")
    group_container_path = r'/etc/group'

    environment = {
        "C_FORCE_ROOT": project.force_root,
        "no_proxy": project.noproxy_host}

    volumes_bind = {
        log_path: {
            'bind': log_container_path,
            'mode': 'rw'},
        src_path: {
            'bind': src_container_path,
            'mode': 'rw'},
        host_path: {
            'bind': host_container_path,
            'mode': 'rw'},
        passwd_path: {
            'bind': passwd_container_path,
            'mode': 'ro'},
        group_path: {
            'bind': group_container_path,
            'mode': 'ro'},
    }

    kargs = {
        "user": "0:0",  # run as root
        "environment": environment,
        "volumes": volumes_bind,
        "privileged": project.privileged,
        "name": c_name
    }

    return containerCollection.create(
        image=image_id, command=project.cmd, **kargs)


@DockerClient
def inspect_file_exist(client, container, loc):
    try:
        fd, _ = container.get_archive(loc)
        return fd
    except:
        return None


def generate_container_name(image_id):
    return image_id + "_" + \
        (project.cname if project.cname is not None
         else str(datetime.datetime.now().strftime("%y%b%d%H%M%S")))


def create_working_dir():
    """
    Create temporary working directory ./tmpxxx/ under current path
    if workdir not provided.
    """

    def create_sub_dir(base_dir):
        def make_sub(sub_dir):
            try:
                os.makedirs(os.path.join(base_dir, sub_dir))
            except:
                pass
        return make_sub

    if project.working_dir is None:
        project.working_dir = tempfile.mkdtemp(dir=os.getcwd())
    else:
        project.working_dir = os.path.join(project.working_dir)

    map(create_sub_dir(project.working_dir), SUB_DIRS.values())


@contextlib.contextmanager
def start():
    create_working_dir()
    get_image_id()
    container = create_image_container()
    container_short_id = container.short_id
    check_shell(container_short_id)

    try:
        rewrite_uid_gid(container_short_id)
    finally:
        container.remove(force=True)

    container = create_container()
    container.start()

    yield container.short_id


def run():
    opt_parser()

    with start() as container_id:
        print("Access container: \"docker exec -it {ID} {CMD}\"".format(
            ID=container_id, CMD="{SHELL}".format(SHELL=project.shell)))
        print("Stop container: \"docker stop {ID}\"".format(
            ID=container_id))
        print("Remove container: \"docker rm {ID}\"".format(
            ID=container_id))
        print("List containers: \"docker ps -a\"")
        print("Stop all containers: \"docker stop $(docker ps -a -q)\"")
        print("Remove all containers: \"docker rm $(docker ps -a -q)\"")
        print("Log dir: {LOG}".format(
            LOG=os.path.join(project.working_dir, "log")))
        print("Src dir: {SRC}".format(SRC=project.src))


def opt_parser():
    parser = argparse.ArgumentParser(
        description='{0} argument parser'.format(sys.argv[0]),
        epilog="Docker container creating script.")

    parser.add_argument('--basesrc', metavar='base_src_directory.',
                        type=str,
                        dest='basesrc',
                        required=True,
                        help='base src directory.')

    parser.add_argument('--cmd', metavar='command_to_run_in_container.',
                        type=str, default=DEFAULT_CMD,
                        dest='cmd',
                        help='command to run in container.')

    parser.add_argument('--cname', metavar='created_container_name.', type=str,
                        default=None,
                        dest='cname',
                        help='container name')

    parser.add_argument('--gid', metavar='gid', type=int,
                        default=os.getgid(),
                        dest='gid',
                        help='GID to run in the container.')

    parser.add_argument('--group', metavar='group_name', type=str,
                        default=r'deployer',
                        dest='group',
                        help='group in container.')

    parser.add_argument('--image', metavar='image_id.',
                        type=str,
                        dest='image_id',
                        default=None,
                        help='docker image\n'
                             'Default: get from images list regex')

    parser.add_argument('--no_proxy_host', metavar='no_proxy_host',
                        type=str, default=DEFAULT_NO_PROXY_HOSTS,
                        dest='noproxy_host',
                        help='hosts that won\'t go with proxy.')

    parser.add_argument('--privileged',
                        action='store_false',
                        dest='privileged',
                        help='docker run in privileged mode')

    parser.add_argument('--project', metavar='project_name.',
                        type=str,
                        choices=PROJECTS,
                        dest='project',
                        required=True,
                        help='project name')

    parser.add_argument('--root',
                        action='store_true',
                        default=True,
                        dest='force_root',
                        help='C_FORCE_ROOT set')

    parser.add_argument('--tag', metavar='image_tag_to_look_for.',
                        type=str, default="latest",
                        dest='tag',
                        help='image tag to look for.')

    parser.add_argument('--user', metavar='user_name', type=str,
                        default=r'deployer',
                        dest='username',
                        help='user in container.')

    parser.add_argument('--uid', metavar='uid', type=int,
                        default=os.getuid(),
                        dest='uid',
                        help='UID to run in the container.')

    parser.add_argument('--workdir', metavar='work dir',
                        type=str,
                        default=None,
                        dest='workdir',
                        help='working directory.')

    global project
    argument = parser.parse_args()
    project = Project(argument, argument.project)


if __name__ == "__main__":
    run()
