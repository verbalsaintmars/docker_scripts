#!/usr/bin/env python
"""
1. Auto figure out docker image id.
2. Use docker python library.
"""

import argparse
import contextlib
import datetime
import os
import shlex
import shutil
import subprocess
import sys
import tempfile


APPEND_HOSTS = r'append_hosts'


def create_working_dir():
    """
    Create temporary working directory ./tmp/xxx under current path
    if workdir not provided.
    """
    if argument.workdir == r'tmp':
        tmp_dir = tempfile.mkdtemp(dir=".")
        os.makedirs(os.path.join(tmp_dir, "log"))
        return tmp_dir
    else:
        workdir = os.path.join(argument.workdir)
        workdir_log = os.path.join(workdir, "log")
        if os.path.isdir(workdir):
            if not os.path.isdir(workdir_log):
                os.makedirs(workdir_log)
            return workdir
        os.makedirs(workdir)
        os.makedirs(workdir_log)
        return argument.workdir


def get_container_name():
    return argument.image + "_" + \
        (argument.cname if argument.cname != ''
         else str(datetime.datetime.now().strftime("%y%b%d%H%M%S")))


def append_host():
    append_host = ''
    if os.path.isfile(APPEND_HOSTS):
        with open(os.path.join(".", APPEND_HOSTS), 'r') as f:
            host_list = f.read().splitlines()
            append_host = "--add-host " + " --add-host ".join(host_list)
    return append_host


def stop_rm_container(container_id):
    for cmd in (r"docker stop {id}".format(id=container_id),
                r"docker rm {id}".format(id=container_id)):
        subprocess.call(shlex.split(cmd))


def rewrite_uid_gid(container_id, working_dir):
    wpath = working_dir
    cmd_t = r"docker cp " + container_id + ":/etc/{filen} " + wpath

    for cmd in (cmd_t.format(filen='passwd'), cmd_t.format(filen='group')):
        subprocess.call(shlex.split(cmd))

    def gen_text(f):
        if f == r'passwd':
            return r"{user}:x:{uid}:{gid}::/home/{home}:/bin/bash".format(
                user=argument.username,
                uid=argument.uid,
                gid=argument.gid,
                home=argument.home)
        else:
            return r"{user}:x:{gid}:".format(
                user=argument.username, gid=argument.gid)

    def check_exist_uid():
        # chk if uid exist and replace uid
        for filen in (r"passwd", r"group"):
            with open(os.path.join(wpath, filen), 'r') as f:
                with open(os.path.join(wpath, filen + "_alt"), 'w') as f2:
                    for current_ln in f.readlines():
                        if argument.username not in current_ln:
                            f2.writelines(current_ln)

    check_exist_uid()

    for filen in (r'passwd', r'group'):
        with open(os.path.join(wpath, filen + "_alt"),
                  "a") as f:
            f.write(gen_text(filen))
        shutil.move(os.path.join(wpath, filen + "_alt"),
                    os.path.join(wpath, filen))


def create_container(working_dir, final=False):
    if final:
        wpath = working_dir
        cmd = r"docker create " + \
            ("-e C_FORCE_ROOT" if argument.force_root else '') + " "
        cmd = cmd + r"--name " + get_container_name() + " "
        cmd = cmd + \
            ("-e no_proxy=" + argument.noproxy_host if argument.noproxy_host else '') + " "
        cmd = cmd + append_host() + " "
        # add volumes
        for vol in (
                r"{logdir}:/var/log/{user}:rw".format(
                    logdir=os.path.join(wpath, "log"), user=argument.username),
                r"{working_dir}:/etc/passwd:ro".format(working_dir=os.path.join(wpath, "passwd")),
                r"{working_dir}:/etc/group:ro".format(working_dir=os.path.join(wpath, "group")),
                r"{working_dir}:/home/shinto/host:rw",
                r"/tmp:/tmp:rw"):
            cmd = cmd + "--volume " + vol + " "
        # run as user
        cmd = cmd + r"--user {uid}:{gid}".format(uid=0, gid=0) + " "
        cmd = cmd + argument.image + " "
        cmd = cmd + argument.cmd
    else:
        cmd = r"docker create {image_id} \"{cmd}\"".format(
            image_id=argument.image,
            cmd=argument.cmd)
    container_id = \
        subprocess.Popen(
            shlex.split(cmd.strip()), stdout=subprocess.PIPE).communicate()[0]
    return container_id.rstrip()


@contextlib.contextmanager
def start_container():
    working_dir = create_working_dir()
    container_id = create_container(working_dir)
    rewrite_uid_gid(container_id, working_dir)
    stop_rm_container(container_id)
    container_id = create_container(working_dir, final=True)
    yield container_id
    print("Running container id: {0}".format(container_id))


def run():
    opt_parser()

    with start_container() as container_id:
        cmd = r"docker start {container_id}".format(
            container_id=container_id)
        subprocess.call(shlex.split(cmd))


def opt_parser():
    parser = argparse.ArgumentParser(
        description='{0} argument parser'.format(sys.argv[0]),
        epilog="Docker container creating script.")

    parser.add_argument('--cname', metavar='container name', type=str,
                        default='',
                        dest='cname',
                        help='container name')

    parser.add_argument('--privileged',
                        metavar='docker run in privileged mode', type=str,
                        action='store_false',
                        dest='privileged',
                        help='docker run in privileged mode')

    parser.add_argument('--user', metavar='user name', type=str,
                        default=r'deployer',
                        dest='username',
                        help='username in container.')

    parser.add_argument('--home', metavar='home dir', type=str,
                        default=r'hacker',
                        dest='home',
                        help='home dir in container.')

    parser.add_argument('--uid', metavar='uid', type=int,
                        default=os.getuid(),
                        dest='uid',
                        help='UID to run in the container.')

    parser.add_argument('--gid', metavar='gid', type=int,
                        default=os.getgid(),
                        dest='gid',
                        help='GID to run in the container.')

    parser.add_argument('--image', metavar='docker image',
                        type=str, required=True,
                        dest='image',
                        help='Current docker image.')

    parser.add_argument('--workdir', metavar='work dir',
                        type=str, default=r'tmp',
                        dest='workdir',
                        help='working directory.')

    parser.add_argument('--cmd', metavar='command to run in container.',
                        type=str, default=r'tail -f /dev/null',
                        dest='cmd',
                        help='command to run in container.')

    parser.add_argument('--proxy', metavar='proxy url',
                        type=str, default=None,
                        dest='proxy',
                        help='proxy url.')

    parser.add_argument('--no_proxy_host', metavar='no proxy host',
                        type=str, default='localhost,127.0.0.1',
                        dest='noproxy_host',
                        help='hosts that won\'t go with proxy.')

    parser.add_argument('--root',
                        action='store_true',
                        default=True,
                        dest='force_root',
                        help='C_FORCE_ROOT set')

    global argument
    argument = parser.parse_args()


if __name__ == "__main__":
    run()
